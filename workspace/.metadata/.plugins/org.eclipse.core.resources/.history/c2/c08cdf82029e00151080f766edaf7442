import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;

@SuppressWarnings("serial")
public class StaffMenu extends JPanel implements ActionListener
{
	private JFrame f;
	private JButton add = new JButton("Add");
	private JButton edit = new JButton("Edit");
	private JButton delete = new JButton("Delete");
	private JButton refresh = new JButton("Refresh");
	private JSplitPane splitPane = new JSplitPane();
	private JLabel label = new JLabel();
	private JLabel label2 = new JLabel();
	private JLabel label3 = new JLabel();
	private JLabel label 4 = new JLabel();
	private NumberFormat money = NumberFormat.getCurrencyInstance();
	//private File file;
	
	private JList<Item> list;
	
	public StaffMenu()
	{	
		f = new JFrame("Staff Menu");
		f.setVisible(true);
		f.setSize(1600, 900);
		f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		
		label.setFont(Main.font);
		label2.setFont(Main.font);
		label3.setFont(Main.font);
		
		JPanel p = new JPanel();
		p.setBackground(Main.bGroundColor);
		BorderLayout blay = new BorderLayout();
		p.setLayout(blay);
		
		GridLayout glay = new GridLayout(1, 4);
		JPanel g = new JPanel();
		g.setLayout(glay);
		g.add(add);
		g.add(edit);
		g.add(delete);
		g.add(refresh);
		
		list = new JList<>();
		list.setFont(Main.font2);
		DefaultListModel<Item> model = new DefaultListModel<>();
		list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list.setModel(model);
		for(int i = 0; i < Main.items.size(); i++)
		{
			model.addElement(Main.items.get(i));
		}
		
		JPanel splitPanel = new JPanel();
		splitPanel.setBackground(Main.bGroundColor);
		splitPane.setLeftComponent(new JScrollPane(list));
		GridLayout glay2 = new GridLayout(0, 1);
		splitPanel.setLayout(glay2);
		splitPanel.add(label);
		splitPanel.add(label2);
		splitPanel.add(label3);
		JLabel imageLabel = new JLabel();
		
		
		splitPane.setRightComponent(splitPanel);
		
		list.getSelectionModel().addListSelectionListener(e -> {
			Item i = list.getSelectedValue();
			label.setText(money.format(i.getPrice()));
			if(i.getRating() != null)
				label2.setText("Rating: " + i.getRating() + " / 5");
			else
				label2.setText("Item not yet rated");
			
			if(i.getOrders() != null)
				label3.setText("Orders: " + i.getOrders());
			else
				label3.setText("Item not yet ordered");
				});
		splitPanel.add(imageLabel);
		p.add(splitPane, BorderLayout.CENTER);
		p.add(g, BorderLayout.NORTH);
		
		add.addActionListener(this);
		edit.addActionListener(this);
		delete.addActionListener(this);
		refresh.addActionListener(this);
		
		
		f.add(p);
	}
	
	public void actionPerformed(ActionEvent c)
	{
		if(c.getSource() == add)
		{
			new AddPane();
		}
		
		if(c.getSource() == edit)
		{
			if(list.getSelectedValue() != null)
				new AddPane(list.getSelectedIndex());
			else
				JOptionPane.showMessageDialog(f, "Please select an item to edit");
		}
		
		if(c.getSource() == delete)
		{
			if(list.getSelectedValue() != null)
			{
				Main.items.remove(list.getSelectedIndex());
				Main.WriteFile();
				JOptionPane.showMessageDialog(f, "Your item has been deleted, please refresh to apply changes.");
			}
			else
				JOptionPane.showMessageDialog(f, "Please select an item to delete.");
		}
		
		if(c.getSource() == refresh)
		{
			try
			{
				Main.refreshList();
				Main.readFile();
				new StaffMenu();
				f.dispose();
			}
			catch (IOException e)
			{
				JOptionPane.showMessageDialog(f, "File not found");
			}
		}
	}
}
