public class StackAry<T> implements IStack<T>
{	
	int top = 0;
	int arySize = 1;
	@SuppressWarnings("unchecked")
	private T[] ary =(T[])new Object[arySize];
	
	public StackAry()
	{
		
	}
	
	@SuppressWarnings("unchecked")
	public void push(T item)
	{
		
		T[] meme = (T[])new Object[arySize + 1];
		for(int i = 0; i < top + 1; i++)
		{
			meme[i] = ary[i];
		}
		
		arySize++;
		
		ary =(T[])new Object[arySize];
		for(int i = 0; i < top + 1; i++)
		{
			ary[i] = meme[i];
		}
		ary[top] = item;
		top++;
	}
	
	@SuppressWarnings("unchecked")
	public T pop()
	{
		if(isEmpty())
			throw new IllegalStateException("top error: stack is empty!");
		else
		{
			T temp = ary[top - 1];
			ary[top - 1] = null;
			
			T[] meme = (T[])new Object[arySize - 1];
			for(int i = 0; i < top; i++)
			{
				meme[i] = ary[i];
			}
			
			arySize--;
			
			ary =(T[])new Object[arySize];
			for(int i = 0; i < top; i++)
			{
				ary[i] = meme[i];
			}
			top--;
			return temp;
		}		
	}
	
	public T top()
	{
		if(isEmpty())
			throw new IllegalStateException("top error: stack is empty!");
		else
			return ary[top - 1];
	}
	
	public boolean isEmpty()
	{
		if(top == 0)
			return true;
		else
			return false;
	}
		
	public int getSize()
	{
		return top;
	}
	
	public String toString()
	{
		StringBuffer sb = new StringBuffer("top->");

		for(int i = top-1; i > -1; i--)
		{
			if(i == 0)
				sb.append(ary[i]);
			else
				sb.append(ary[i] + "->");
		}

		String s = sb.toString();
		return s;
	}
}