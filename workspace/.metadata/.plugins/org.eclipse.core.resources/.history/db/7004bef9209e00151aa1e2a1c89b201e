import java.awt.*;
import java.awt.event.*;
import java.text.NumberFormat;

import javax.swing.*;

@SuppressWarnings("serial")
public class ItemCart extends JPanel implements ActionListener
{
	private JButton pay = new JButton("Pay");
	private JButton removeItem = new JButton("Remove From Cart");
	private JButton shop = new JButton("Back to Shopping");
	
	private JSplitPane splitPane = new JSplitPane();
	private JLabel label = new JLabel();
	private JLabel label2 = new JLabel();
	private JLabel label3 = new JLabel();
	private JLabel label4 = new JLabel();
	private NumberFormat money = NumberFormat.getCurrencyInstance();
	
	private JFrame f;
	private JList<Item> list;
	
	public ItemCart()
	{
		f = new JFrame("Checkout");
		f.setSize(1200, 800);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		
		JPanel p = new JPanel();
		p.setBackground(Main.bGroundColor);
		BorderLayout blay = new BorderLayout();
		p.setLayout(blay);
		
		GridLayout glay = new GridLayout(3, 1);
		JPanel grid = new JPanel();
		grid.setLayout(glay);
		grid.add(removeItem);
		grid.add(shop);
		grid.add(pay);
		
		list = new JList<>();
		list.setFont(Main.font2);
		DefaultListModel<Item> model = new DefaultListModel<>();
		list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list.setModel(model);
		for(int i = 0; i < Main.cart.size(); i++)
		{
			model.addElement(Main.cart.get(i));
		}
		
		JPanel splitPanel = new JPanel();
		splitPanel.setBackground(Main.bGroundColor);
		splitPane.setLeftComponent(new JScrollPane(list));
		GridLayout glay2 = new GridLayout(0, 1);
		splitPanel.setLayout(glay2);
		splitPanel.add(label);
		splitPanel.add(label2);
		splitPanel.add(label3);
		splitPanel.add(label4);		
		splitPane.setRightComponent(splitPanel);
		
		label.setFont(Main.font2);
		label2.setFont(Main.font);
		label3.setFont(Main.font);
		label4.setFont(Main.font3);
		
		list.getSelectionModel().addListSelectionListener(e -> {
			Item i = list.getSelectedValue();
			label.setText(money.format(i.getPrice()));
			if(i.getRating() != null)
				label2.setText("Rating: " + i.getRating() + " / 5");
			else
				label2.setText("Item not yet rated");
			
			if(i.getOrders() != null)
				label3.setText("Orders: " + i.getOrders());
			else
				label3.setText("Item not yet ordered");
			label4.setText("Description: " + i.getDesc());
				});	
		
		pay.addActionListener(this);
		removeItem.addActionListener(this);
		shop.addActionListener(this);
		
		p.add(splitPane, BorderLayout.CENTER);
		p.add(grid, BorderLayout.EAST);
		
		f.add(p);
	}
	
	
	
	public void actionPerformed(ActionEvent h)
	{
		if(h.getSource() == pay)
		{
			
		}
		
		if(h.getSource() == removeItem)
		{
			if(!list.isSelectionEmpty())
			{
				Main.cart.remove(list.getSelectedIndex());
				new ItemCart();
				f.dispose();
			}
			else
				JOptionPane.showMessageDialog(f, "Please Select an item");
		}
		
		if(h.getSource() == shop)
		{
			f.dispose();
		}
	}
	
}
